var callbacks = $.Callbacks("memory");callbacks.add( chart_globals );callbacks.add( donut_chart );callbacks.fire();function chart_globals() {  Chart.defaults.global = {      // Boolean - Whether to animate the chart      animation: true,      // Number - Number of animation steps      animationSteps: 60,      // String - Animation easing effect      // Possible effects are:      // [easeInOutQuart, linear, easeOutBounce, easeInBack, easeInOutQuad,      //  easeOutQuart, easeOutQuad, easeInOutBounce, easeOutSine, easeInOutCubic,      //  easeInExpo, easeInOutBack, easeInCirc, easeInOutElastic, easeOutBack,      //  easeInQuad, easeInOutExpo, easeInQuart, easeOutQuint, easeInOutCirc,      //  easeInSine, easeOutExpo, easeOutCirc, easeOutCubic, easeInQuint,      //  easeInElastic, easeInOutSine, easeInOutQuint, easeInBounce,      //  easeOutElastic, easeInCubic]      animationEasing: "easeOutQuart",      // Boolean - If we should show the scale at all      showScale: true,      // Boolean - If we want to override with a hard coded scale      scaleOverride: false,      // ** Required if scaleOverride is true **      // Number - The number of steps in a hard coded scale      scaleSteps: null,      // Number - The value jump in the hard coded scale      scaleStepWidth: null,      // Number - The scale starting value      scaleStartValue: null,      // String - Colour of the scale line      scaleLineColor: "rgba(0,0,0,.1)",      // Number - Pixel width of the scale line      scaleLineWidth: 1,      // Boolean - Whether to show labels on the scale      scaleShowLabels: true,      // Interpolated JS string - can access value      scaleLabel: "<%=value%>",      // Boolean - Whether the scale should stick to integers, not floats even if drawing space is there      scaleIntegersOnly: true,      // Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value      scaleBeginAtZero: false,      // String - Scale label font declaration for the scale label      scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",      // Number - Scale label font size in pixels      scaleFontSize: 12,      // String - Scale label font weight style      scaleFontStyle: "normal",      // String - Scale label font colour      scaleFontColor: "#666",      // Boolean - whether or not the chart should be responsive and resize when the browser does.      responsive: true,      // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container      maintainAspectRatio: true,      // Boolean - Determines whether to draw tooltips on the canvas or not      showTooltips: true,      // Function - Determines whether to execute the customTooltips function instead of drawing the built in tooltips (See [Advanced - External Tooltips](#advanced-usage-custom-tooltips))      customTooltips: false,      // Array - Array of string names to attach tooltip events      tooltipEvents: ["mousemove", "touchstart", "touchmove"],      // String - Tooltip background colour      tooltipFillColor: "rgba(0,0,0,0.8)",      // String - Tooltip label font declaration for the scale label      tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",      // Number - Tooltip label font size in pixels      tooltipFontSize: 14,      // String - Tooltip font weight style      tooltipFontStyle: "normal",      // String - Tooltip label font colour      tooltipFontColor: "#fff",      // String - Tooltip title font declaration for the scale label      tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",      // Number - Tooltip title font size in pixels      tooltipTitleFontSize: 14,      // String - Tooltip title font weight style      tooltipTitleFontStyle: "bold",      // String - Tooltip title font colour      tooltipTitleFontColor: "#fff",      // Number - pixel width of padding around tooltip text      tooltipYPadding: 6,      // Number - pixel width of padding around tooltip text      tooltipXPadding: 6,      // Number - Size of the caret on the tooltip      tooltipCaretSize: 8,      // Number - Pixel radius of the tooltip border      tooltipCornerRadius: 6,      // Number - Pixel offset from point x to tooltip edge      tooltipXOffset: 10,      // String - Template string for single tooltips      tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>",      // String - Template string for multiple tooltips      multiTooltipTemplate: "<%= value %>",      // Function - Will fire on animation progression.      onAnimationProgress: function(){},      // Function - Will fire on animation completion.      onAnimationComplete: function(){}  }}function donut_chart() {  var data = [      {          value: 5000,          color:"#F7464A",          highlight: "#FF5A5E",          label: "Black Rhino"      },      {          value: 3000,          color: "#46BFBD",          highlight: "#5AD3D1",          label: "Indian Rhino"      },      {          value: 60,          color: "#FDB45C",          highlight: "#FFC870",          label: "Javan Rhino"      },      {          value: 100,          color: "#949FB1",          highlight: "#A8B3C5",          label: "Sumatran Rhino"      },      {          value: 20000,          color: "#4D5360",          highlight: "#616774",          label: "White Rhino"      }  ];  var options = {    animateScale: false,    //Boolean - Whether we should show a stroke on each segment    segmentShowStroke : false,    //String - The colour of each segment stroke    segmentStrokeColor : "#fff",    //Number - The width of each segment stroke    segmentStrokeWidth : 2,    //Number - The percentage of the chart that we cut out of the middle    percentageInnerCutout : 70, // This is 0 for Pie charts    //Number - Amount of animation steps    animationSteps : 40,    //String - Animation easing effect    animationEasing : "easeOutBounce",    //Boolean - Whether we animate the rotation of the Doughnut    animateRotate : true,    // Function - Will fire on animation completion.    onAnimationComplete: function(){},    //String - A legend template    legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"  };  var ctx = $("#rhino-chart").get(0).getContext("2d");  var donut_chart = new Chart(ctx).Doughnut(data, options);  $("#rhino-chart").click(      function(evt){          var activePoints = donut_chart.getSegmentsAtEvent(evt);          var name = activePoints[0].label;          donut_chart.destroy();          $("#rhino-chart").unbind("click");          switch(name) {              case "White Rhino":                  //window.location.href = "https://en.wikipedia.org/wiki/White_rhinoceros";                  line_chart(name);                  break;              case "Black Rhino":                  //window.location.href = "https://en.wikipedia.org/wiki/Black_rhinoceros";                  line_chart(name);                  break;              case "Indian Rhino":                  //window.location.href = "https://en.wikipedia.org/wiki/Indian_rhinoceros";                  line_chart(name);                  break;              case "Javan Rhino":                  //window.location.href = "https://en.wikipedia.org/wiki/Javan_rhinoceros";                  line_chart(name);                  break;              case "Sumatran Rhino":                  //window.location.href = "https://en.wikipedia.org/wiki/Sumatran_rhinoceros";                  line_chart(name);                  break;          }      }  );}function line_chart(name) {  var data = {      labels: ["1960", "1970", "1980", "1990", "2000", "2010"]  };  switch(name) {      case "White Rhino":          //window.location.href = "https://en.wikipedia.org/wiki/White_rhinoceros";          var w_data =          {              datasets: [                  {                      label: "White Rhino",                      fillColor: "rgba(220,220,220,0.2)",                      strokeColor: "rgba(220,220,220,1)",                      pointColor: "rgba(220,220,220,1)",                      pointStrokeColor: "#fff",                      pointHighlightFill: "#fff",                      pointHighlightStroke: "rgba(220,220,220,1)",                      data: [2300, 4000, 8000, 12000, 16000, 20000]                  }              ]          };          $.extend( data, w_data );          break;      case "Black Rhino":          //window.location.href = "https://en.wikipedia.org/wiki/Black_rhinoceros";          var b_data =          {              datasets: [                  {                      label: "Black Rhino",                      fillColor: "rgba(220,220,220,0.2)",                      strokeColor: "rgba(220,220,220,1)",                      pointColor: "rgba(220,220,220,1)",                      pointStrokeColor: "#fff",                      pointHighlightFill: "#fff",                      pointHighlightStroke: "rgba(220,220,220,1)",                      data: [100000, 67000, 35000, 3000, 4000, 5000]                  }              ]          };          $.extend( data, b_data );          break;      case "Indian Rhino":          //window.location.href = "https://en.wikipedia.org/wiki/Indian_rhinoceros";          var i_data =          {              datasets: [                  {                      label: "Indian Rhino",                      fillColor: "rgba(220,220,220,0.2)",                      strokeColor: "rgba(220,220,220,1)",                      pointColor: "rgba(220,220,220,1)",                      pointStrokeColor: "#fff",                      pointHighlightFill: "#fff",                      pointHighlightStroke: "rgba(220,220,220,1)",                      data: [600, 1080, 1560, 2040, 2520, 3000]                  }              ]          };          $.extend( data, i_data );          break;      case "Javan Rhino":          //window.location.href = "https://en.wikipedia.org/wiki/Javan_rhinoceros";          var j_data =          {              datasets: [                  {                      label: "Javan Rhino",                      fillColor: "rgba(220,220,220,0.2)",                      strokeColor: "rgba(220,220,220,1)",                      pointColor: "rgba(220,220,220,1)",                      pointStrokeColor: "#fff",                      pointHighlightFill: "#fff",                      pointHighlightStroke: "rgba(220,220,220,1)",                      data: [25, 35, 60, 50, 55, 60]                  }              ]          };          $.extend( data, j_data );          break;      case "Sumatran Rhino":          //window.location.href = "https://en.wikipedia.org/wiki/Sumatran_rhinoceros";          var s_data =          {              datasets: [                  {                      label: "Sumatran Rhino",                      fillColor: "rgba(220,220,220,0.2)",                      strokeColor: "rgba(220,220,220,1)",                      pointColor: "rgba(220,220,220,1)",                      pointStrokeColor: "#fff",                      pointHighlightFill: "#fff",                      pointHighlightStroke: "rgba(220,220,220,1)",                      data: [170, 120, 280, 700, 300, 250]                  }              ]          };          $.extend( data, s_data );          break;  }  var options =  {    ///Boolean - Whether grid lines are shown across the chart    scaleShowGridLines : false,    //String - Colour of the grid lines    scaleGridLineColor : "rgba(0,0,0,.05)",    //Number - Width of the grid lines    scaleGridLineWidth : 0,    //Boolean - Whether to show horizontal lines (except X axis)    scaleShowHorizontalLines: false,    //Boolean - Whether to show vertical lines (except Y axis)    scaleShowVerticalLines: false,    //Boolean - Whether the line is curved between points    bezierCurve : true,    //Number - Tension of the bezier curve between points    bezierCurveTension : 0.4,    //Boolean - Whether to show a dot for each point    pointDot : true,    //Number - Radius of each point dot in pixels    pointDotRadius : 8,    //Number - Pixel width of point dot stroke    pointDotStrokeWidth : 1,    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point    pointHitDetectionRadius : 20,    //Boolean - Whether to show a stroke for datasets    datasetStroke : true,    //Number - Pixel width of dataset stroke    datasetStrokeWidth : 2,    //Boolean - Whether to fill the dataset with a colour    datasetFill : true,    //String - A legend template    legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"  }  var ctx = $("#rhino-chart").get(0).getContext("2d");  var myLineChart = new Chart(ctx).Line(data, options);}